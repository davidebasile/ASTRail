<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//------------------------------------------
//parameters of the model

//number of trains
const int nTrain=3;

//exponential rates of train and RBC
const double rateOBU=0.5;
const double rateRBC=0.5;

//rate in which a new location is required to LU
const double freqLU = 0.5;   

//timeout to reception of MA
const int OBU_out_timer= 30; 

//the frequency in which the OBU location is sent to the RBC
const int freqOBU = 1; 

//the frequency of sending MA before the ack is received
const int freqRBC=1; 

//attempts in sending MA before receiving ack
const int MaxAttemptsToSendMa=3;

//movement authority when no train is ahead
const int maIfNoTrainAhead = 6000;

//------------------------------------------

//other declarations

// constants for identifying who caused the failure
const int SENDLOC=1;
const int RECEIVEMA=2;
int whofailed=0;

// channels
broadcast chan LU_send_location[nTrain];        //LU --&gt; OBU_SendLoc
broadcast chan OBU_send_location_to_RBC[nTrain];//OBU_Send_Loc --&gt; RBC
broadcast chan OBU_rec_MA[nTrain];              //RBC --&gt; OBU_ReceiveMA, OBU_SendLoc, LU
broadcast chan OBU_send_MA_ack[nTrain];         //OBU_ReceiveMA --&gt; RBC
broadcast chan OBU_fail[nTrain];                //OBU_SendLoc, OBU_ReceiveMA --&gt; OBU_SendLoc, OBU_ReceiveMA, LU

//buffers for value passing
double x=0.0;
int y=0;
double z=0.0; 

//locations shared by RBC
double loc[nTrain];


</declaration>
	<template>
		<name>RBC_Main_T</name>
		<parameter>const int id_RBC, const int id_Train</parameter>
		<declaration>clock c=0.0;

int attempts=0;

double ma;

double computeMA(){
   int i;
   double val=0.0;
   for(i=0;i&lt;nTrain;i++){
      if (i!=id_Train &amp;&amp; loc[i]&gt;loc[id_Train] &amp;&amp; (val==0||loc[i]&lt;val))
        val=loc[i];
   }
   if (val&gt;0.0)
        return val;
   else
        return loc[id_Train]+maIfNoTrainAhead;
}
</declaration>
		<location id="id0" x="-2448" y="-2907">
			<name x="-2474" y="-2941">SendingMA</name>
			<label kind="invariant" x="-2439" y="-3034">attempts &lt;= MaxAttemptsToSendMa &amp;&amp; 
loc[id_Train]&lt;=computeMA() &amp;&amp; 
forall (id:int[0,nTrain-1]) (loc[id]&lt;=loc[id_Train] || 
(loc[id]&gt;=computeMA() &amp;&amp; 
exists (id1:int[0,nTrain-1]) computeMA()==loc[id1]))</label>
			<label kind="exponentialrate" x="-2490" y="-2898">rateRBC</label>
		</location>
		<location id="id1" x="-2864" y="-2907">
			<name x="-2898" y="-2941">I_WaitingLoc</name>
		</location>
		<location id="id2" x="-2932" y="-2907">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-2703" y="-3017">OBU_send_location_to_RBC[id_Train]?</label>
			<label kind="assignment" x="-2754" y="-3000">loc[id_Train]=z, c=freqRBC, z=0.0, attempts=0</label>
			<nail x="-2490" y="-2983"/>
			<nail x="-2448" y="-2983"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-2710" y="-2822">OBU_send_MA_ack[id_RBC]?</label>
			<label kind="assignment" x="-2711" y="-2805">attempts=0</label>
			<nail x="-2448" y="-2805"/>
			<nail x="-2830" y="-2805"/>
			<nail x="-2864" y="-2847"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-2710" y="-2864">attempts&gt;=MaxAttemptsToSendMa</label>
			<label kind="assignment" x="-2711" y="-2847">attempts=0</label>
			<nail x="-2473" y="-2847"/>
			<nail x="-2839" y="-2847"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-2397" y="-2915">c&gt;=freqRBC &amp;&amp; attempts &lt; MaxAttemptsToSendMa</label>
			<label kind="synchronisation" x="-2397" y="-2898">OBU_rec_MA[id_Train]!</label>
			<label kind="assignment" x="-2397" y="-2881">c=0,x=computeMA(),attempts=attempts+1</label>
			<nail x="-2397" y="-2907"/>
			<nail x="-2397" y="-2873"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-2787" y="-2924">OBU_send_location_to_RBC[id_Train]?</label>
			<label kind="assignment" x="-2788" y="-2907">loc[id_Train]=z, c=freqRBC, z=0.0</label>
		</transition>
	</template>
	<template>
		<name>OBU_MAIN_SendLocationToRBC_T</name>
		<parameter>const int id_T</parameter>
		<declaration>bool boot=true;

double lastlocsent=0.0;
double loc=0.0;
double ma=0.0;  
clock c=0.0;

bool newloctosend=false;

double rateOBU=0.5;
int freqOBU=1;</declaration>
		<location id="id3" x="-10676" y="-10778">
			<name x="-10693" y="-10812">Failure</name>
		</location>
		<location id="id4" x="-10676" y="-10650">
			<name x="-10744" y="-10701">WatingLocFromLU</name>
			<label kind="invariant" x="-10744" y="-10684">(ma&gt;=0 &amp;&amp; loc&lt;ma) || boot</label>
			<label kind="exponentialrate" x="-10659" y="-10667">rateOBU</label>
		</location>
		<location id="id5" x="-10922" y="-10650">
			<committed/>
		</location>
		<location id="id6" x="-10676" y="-10489">
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-10548" y="-10650">c&gt;=freqOBU &amp;&amp; newloctosend</label>
			<label kind="synchronisation" x="-10548" y="-10633">OBU_send_location_to_RBC[id_T]!</label>
			<label kind="assignment" x="-10548" y="-10616">z=loc,c=0.0,
lastlocsent=loc,
newloctosend=false</label>
			<nail x="-10548" y="-10650"/>
			<nail x="-10548" y="-10599"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-11075" y="-10710">OBU_fail[id_T]?</label>
			<label kind="assignment" x="-11067" y="-10693">loc=0, ma=0</label>
			<nail x="-10973" y="-10650"/>
			<nail x="-10973" y="-10778"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-10548" y="-10506">OBU_fail[id_T]?</label>
			<label kind="assignment" x="-10540" y="-10489">loc=0, ma=0</label>
			<nail x="-10446" y="-10489"/>
			<nail x="-10446" y="-10778"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-10803" y="-10557">loc&lt;ma || boot</label>
			<nail x="-10710" y="-10531"/>
			<nail x="-10710" y="-10591"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-10676" y="-10548">LU_send_location[id_T]?</label>
			<label kind="assignment" x="-10676" y="-10531">loc=z,z=0.0, newloctosend=true</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="-11067" y="-10523">(loc&gt;=ma || ma&lt;0) &amp;&amp; !boot</label>
			<label kind="synchronisation" x="-11067" y="-10506">OBU_fail[id_T]!</label>
			<label kind="assignment" x="-11067" y="-10489">whofailed=SENDLOC, 
loc=0,ma=0</label>
			<nail x="-11084" y="-10489"/>
			<nail x="-11084" y="-10778"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-10905" y="-10608">loc&lt;ma &amp;&amp; ma&gt;=0</label>
			<nail x="-10922" y="-10591"/>
			<nail x="-10803" y="-10591"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-10897" y="-10812">(loc&gt;=ma || ma&lt;0) &amp;&amp; !boot</label>
			<label kind="synchronisation" x="-10904" y="-10795">OBU_fail[id_T]!</label>
			<label kind="assignment" x="-10948" y="-10778">whofailed=SENDLOC, loc=0, ma=0</label>
			<nail x="-10922" y="-10778"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-10904" y="-10671">OBU_rec_MA[id_T]?</label>
			<label kind="assignment" x="-10904" y="-10654">ma=x, boot=false</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-10676" y="-10743">OBU_fail[id_T]?</label>
		</transition>
	</template>
	<template>
		<name>OBU_MAIN_ReceiveMA_T</name>
		<parameter>const int id_T</parameter>
		<declaration>

double ma=0.0;
clock c=0.0;
bool sendack=false;


</declaration>
		<location id="id7" x="-340" y="-238">
			<name x="-382" y="-272">Failure</name>
		</location>
		<location id="id8" x="-340" y="-85">
			<name x="-408" y="-119">I_WaitingMAfromRBC</name>
			<label kind="invariant" x="-391" y="-136">c&lt;=OBU_out_timer</label>
			<label kind="exponentialrate" x="-365" y="-68">rateOBU</label>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-255" y="-94">OBU_rec_MA[id_T]?</label>
			<label kind="assignment" x="-255" y="-77">sendack=true,c=0</label>
			<nail x="-263" y="-94"/>
			<nail x="-263" y="-76"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-561" y="-204">c==OBU_out_timer</label>
			<label kind="synchronisation" x="-535" y="-187">OBU_fail[id_T]!</label>
			<label kind="assignment" x="-586" y="-170">whofailed=RECEIVEMA</label>
			<nail x="-433" y="-85"/>
			<nail x="-433" y="-238"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="guard" x="-365" y="-25">sendack</label>
			<label kind="synchronisation" x="-365" y="-8">OBU_send_MA_ack[id_T]!</label>
			<label kind="assignment" x="-365" y="8">sendack=false</label>
			<nail x="-323" y="-25"/>
			<nail x="-357" y="-25"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-340" y="-212">OBU_fail[id_T]?</label>
		</transition>
	</template>
	<template>
		<name>LU_MAIN_T</name>
		<parameter>const int id_T, const double startloc, const double stoploc, const double start_speed, const double average_speed</parameter>
		<declaration>
clock c = 0.0;

//---- data retrieved from http://www.railway-technical.com/books-papers--articles/high-speed-railway-capacity.pdf ----//
//const double average_speed =  100.0; // m/s ~ 300 km/h
 //average acceleration 0.3 m/s^2

const double distance_to_break = 5000.0; //at headway&lt;5000 meters the train decelerates! 

/*
https://www.maglev.net/worlds-fastest-high-speed-trains-in-commercial-operation
* it can accelerate from 0 to 300 km/h in 316 seconds *

https://www.hindawi.com/journals/mpe/2020/3872852/     (Figure 8)
* it needs ~100 seconds to stop from ~300 km/h speed*,  braking distance is ~5000 meters *

Figure 8 shows the identification curve of train braking speed by online EM and the calculation curve of braking displacement. 
It takes 94.2 seconds from normal operation to stop, and the braking distance is 4647.16 meters, which meets the national standard.

https://www.quora.com/How-long-does-it-take-for-a-train-to-come-to-a-complete-emergency-stop
320km/h 1700m    decelerate at  1.2m/s/s
*/

//---------------------------------------------------------------------------------------------------------------------//

clock speed= 2.0; // m/s 
double ma= 2.0;
clock space=0.0;  //m

double computeAcceleration()
{
    //these values have been instantiated empirically
   // const int deceleration_constant = 3500;
    const int acceleration_constant = 95;

    double headway = ma - space; 
    bool stop = space+0.0&gt;=stoploc;

    if ((speed+0.0)&lt;=1.0) {
           if ((headway&lt;distance_to_break)|| stop) return 0.0;  //stop decelerating otherwise negative speed!
           else  return 30;
    }
    else if ((headway&lt;distance_to_break)|| stop )  return -1.32*1/log(speed); //-0.83; // -1.2 emergency stop

//(-deceleration_constant)/(speed*speed);
    else return ((average_speed-speed)/acceleration_constant);
}

void initialise(){
    space=startloc;
    speed=start_speed;
}

/**  
    ___    _____ ______ ____   ___     ____ __ 
   /   |  / ___//_  __// __ \ /   |   /  _// / 
  / /| |  \__ \  / /  / /_/ // /| |   / / / /  
 / ___ | ___/ / / /  / _, _// ___ | _/ / / /___
/_/  |_|/____/ /_/  /_/ |_|/_/  |_|/___//_____/

__________   _______________________________________^__
 ___   ___ |||  ___   ___   ___    ___ ___  |   __  ,----\
|   | |   |||| |   | |   | |   |  |   |   | |  |  | |_____\
|___| |___|||| |___| |___| |___|  | O | O | |  |  |        \
           |||                    |___|___| |  |__|         )
___________|||______________________________|______________/

*/</declaration>
		<location id="id9" x="-221" y="-280">
			<name x="-263" y="-306">I_GO</name>
			<label kind="invariant" x="-297" y="-365">speed&gt;=0 &amp;&amp; ma&gt;=0 &amp;&amp;
speed'==computeAcceleration() &amp;&amp;
space'==speed &amp;&amp; c&lt;=freqLU</label>
		</location>
		<location id="id10" x="-221" y="-170">
			<name x="-272" y="-195">Failure</name>
			<label kind="invariant" x="-272" y="-229">space' == 0 &amp;&amp;
speed' == 0</label>
		</location>
		<location id="id11" x="-357" y="-280">
			<name x="-367" y="-314">Init</name>
			<committed/>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-136" y="-289">c==freqLU</label>
			<label kind="synchronisation" x="-136" y="-272">LU_send_location[id_T]!</label>
			<label kind="assignment" x="-136" y="-255">z=space, c=0</label>
			<nail x="-136" y="-280"/>
			<nail x="-136" y="-238"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="assignment" x="-340" y="-297">initialise()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-297" y="-416">OBU_rec_MA[id_T]?</label>
			<label kind="assignment" x="-238" y="-399">ma=x</label>
			<nail x="-247" y="-374"/>
			<nail x="-187" y="-374"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-323" y="-263">OBU_fail[id_T]?</label>
			<label kind="assignment" x="-340" y="-246">space=0,speed=0</label>
		</transition>
	</template>
	<system>//TRAINs

//TRAIN 1
OBU_MAIN_SendLocationToRBC1 = OBU_MAIN_SendLocationToRBC_T(0);
OBU_MAIN_ReceiveMA1 = OBU_MAIN_ReceiveMA_T(0);
LU_MAIN1  = LU_MAIN_T(0,1000.0,80000.0,0.0,84.0);

//TRAIN 2
OBU_MAIN_SendLocationToRBC2 = OBU_MAIN_SendLocationToRBC_T(1);
OBU_MAIN_ReceiveMA2 = OBU_MAIN_ReceiveMA_T(1);
LU_MAIN2 = LU_MAIN_T(1,2000.0,80000.0,0.0,42.0);

//TRAIN 3
OBU_MAIN_SendLocationToRBC3 = OBU_MAIN_SendLocationToRBC_T(2);
OBU_MAIN_ReceiveMA3 = OBU_MAIN_ReceiveMA_T(2);
LU_MAIN3 = LU_MAIN_T(2,0.0,80000.0,0.0,84.0);


//RBCs
RBC_MAIN1 = RBC_Main_T(0,0);
RBC_MAIN2 = RBC_Main_T(1,1);
RBC_MAIN3 = RBC_Main_T(2,2);

system 
    LU_MAIN1,  
	OBU_MAIN_SendLocationToRBC1,
	OBU_MAIN_ReceiveMA1,
	LU_MAIN2,
	OBU_MAIN_SendLocationToRBC2,
	OBU_MAIN_ReceiveMA2,
	LU_MAIN3,
	OBU_MAIN_SendLocationToRBC3,
	OBU_MAIN_ReceiveMA3,
	RBC_MAIN1,
	RBC_MAIN2,
	RBC_MAIN3;
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=1000](&lt;&gt;whofailed==SENDLOC)
			</formula>
			<comment>Failure because loc exceeds ma in one of the OBU

(29 runs) Pr(&lt;&gt; ...) in [0,0.0981446]
with confidence 0.95.</comment>
		</query>
		<query>
			<formula>Pr[&lt;=1000](&lt;&gt;whofailed==RECEIVEMA)
			</formula>
			<comment>Failure timeout of reception of MA in one of the OBU

with timeout=30
(29 runs) Pr(&lt;&gt; ...) in [0,0.0981446]
with confidence 0.95.


with timeout=25
(88 runs) Pr(&lt;&gt; ...) in [0.0125218,0.112309]
with confidence 0.95.</comment>
		</query>
		<query>
			<formula>Pr[&lt;=1000] (&lt;&gt; (OBU_MAIN_SendLocationToRBC1.lastlocsent!=loc[0] &amp;&amp; RBC_MAIN1.SendingMA) || 
	       (OBU_MAIN_SendLocationToRBC2.lastlocsent!=loc[1] &amp;&amp; RBC_MAIN2.SendingMA) ||
	       (OBU_MAIN_SendLocationToRBC3.lastlocsent!=loc[2] &amp;&amp; RBC_MAIN3.SendingMA))</formula>
			<comment>(29 runs) Pr(&lt;&gt; ...) in [0,0.0981446]
with confidence 0.95.</comment>
		</query>
	</queries>
</nta>
